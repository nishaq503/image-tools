name: Plugin Release

on:
  push:
    branches:
      - master
      - main
      - dev

permissions:
  contents: write

jobs:
  bumpversion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install bump2version
        run: |
          python -m pip install --upgrade pip
          pip install bump2version
      - name: Get changed files
        uses: jitterbit/get-changed-files@v1
        id: files
        with:
          format: space-delimited
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Find Plugin
        id: plugin_filter
        run: |
          FOUND_PLUGIN=false
          for changed_file in ${{ steps.files.outputs.all }}
          do
            if [[ "$(basename ${changed_file})" == *"pyproject.toml"* ]]
            then
              echo "plugin_dir=$(dirname ${changed_file})" >> "$GITHUB_OUTPUT"
              echo "plugin_name=$(basename $(dirname ${changed_file}))" >> "$GITHUB_OUTPUT"
              FOUND_PLUGIN=true
              break
            fi
          done
          if [[ "$FOUND_PLUGIN" = false ]]
          then
            echo "::error::No pyproject.toml file found among changed files" && exit 1
          fi
      - name: Get Old Version
        id: old_version
        run: |
          cd "${{ steps.plugin_filter.outputs.plugin_dir }}"
          if [[ "$(cat VERSION)" != *"dev"* ]]
          then
            echo "::error::${{ steps.plugin_filter.outputs.plugin_name }} does not have a dev version" && exit 1
          fi
          echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"
      - name: Bump Version
        id: bump_version
        run: |
          cd "${{ steps.plugin_filter.outputs.plugin_dir }}"
          bump2version release --no-commit
          echo "new_version=$(cat VERSION)" >> "$GITHUB_OUTPUT"
      - name: Commit and Push all changed files
        env:
          CI_COMMIT_MESSAGE: Bumped version for "${{ steps.plugin_filter.outputs.plugin_name }}" from ${{ steps.bump_version.outputs.old_version }} to ${{ steps.bump_version.outputs.new_version }}
          CI_COMMIT_AUTHOR: Continuous Integration
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
          git commit -a -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push
